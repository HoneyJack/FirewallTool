<div class="span12">
  <div class="row-fluid">
    <table class="table table-bordered table-condensed table-striped rule-policy rule">
      <thead>
      <tr>
        <th class="rule-table">Table</th>
        <th class="rule-chain">Chain</th>
        <th class="rule-interface">Interface I/0</th>

        <th class="rule-ip">Source</th>
        <th class="rule-ip">Destination</th>
        <th class="rule-protocol">Protocol</th>
        <th class="rule-port">Port</th>

        <th class="rule-connection">Connection State</th>
        <th class="rule-job">Action</th>
        <th class="rule-ip">Nat Ip</th>
        <th style="width: 1px;"></th>
      </tr>
      </thead>
      <%= form_for "rule", url: "#", html: {id: "rule-form"} do |f| %>
          <tbody id="all-rules">
              <% to_disable = %w(MASQUERADE DROP ACCEPT REJECT) %>
              <% rules.each_with_index do |rule, i| %>
                <% disable_action = to_disable.include?(rule.job) %>
                <%= f.fields_for "rules[]", rule do |r| %>
                  <tr data-order="<%= i+1 %>" data-rule-id="<%= rule.id %>">
                    <td><%= r.select :table, Rule.table.options, {}, {class: "rule-table", id: "table-#{i+1}", data: {order: i+1}} %></td>
                    <td><%= r.select :chain, Rules::CHAINS_BY_TABLE[rule.table], {}, {class: "rule-chain upper-case", id: "chain-#{i+1}", data: {order: i+1}} %></td>
                    <td>
                        <table>
                          <tr>
                           <td>
                            <%= r.select :input_device, Interface.build_interfaces(firewall.connections_limit).map{|interface| [interface.name, interface.name]}, {prompt: "eth..."}, {class: "rule-interface", disabled: !Rules::DEVICE_BY_CHAIN[:input_device].include?(rule.chain.to_sym), id: "input-device-#{i+1}", data: {order: i+1}} %>
                           </td>
                          </tr>
                          <tr>
                            <td>
                              <%= r.select :output_device, Interface.build_interfaces(firewall.connections_limit).map{|interface| [interface.name, interface.name]}, {include_blank: "eth..."}, {class: "rule-interface", disabled: !Rules::DEVICE_BY_CHAIN[:output_device].include?(rule.chain.to_sym), id: "output-device-#{i+1}", data: {order: i+1}} %>
                            </td>
                          </tr>
                        </table>
                    </td>
                    <td>
                        <table>
                          <tr>
                            <td><%= r.text_field :source_ip, maxlength: 15, class: "rule-ip", data: {order: i+1}, placeholder: :ip %></td>
                          </tr>
                          <tr>
                            <td><%= r.text_field :source_mask, maxlength: 15,  class: "rule-ip", data: {order: i+1}, placeholder: :mask %></td>
                          </tr>
                        </table>
                    </td>
                    <td>
                      <table>
                        <tr>
                          <td><%= r.text_field :destination_ip, maxlength: 15, class: "rule-ip", data: {order: i+1}, placeholder: :ip %></td>
                        </tr>
                        <tr>
                          <td><%= r.text_field :destination_mask, maxlength: 15, class: "rule-ip", data: {order: i+1}, placeholder: :mask %></td>
                        </tr>
                      </table>
                    </td>
                    <td><%= r.select :protocol, Rule.protocol.options, {}, {class: "rule-protocol", data: {order: i+1}} %></td>
                    <td>
                        <table>
                          <tr>
                            <td><%= r.text_field :source_port, class: "rule-port", min: 1, max: 65535, data: {order: i+1}, placeholder: :source %></td>
                          </tr>
                          <tr>
                            <td><%= r.text_field :destination_port, class: "rule-port", min: 1, max: 65535, data: {order: i+1}, placeholder: :destination %></td>
                          </tr>
                        </table>
                    </td>
                    <td>
                      <% Rule.values_for_connection_states.each do |connection_state| %>
                          <%= label_tag "", class: "rule-connection no-margin" do %>
                            <%= check_box_tag "rule[rules][#{i+1}][connection_states][]", connection_state, rule.connection_states.include?(connection_state), data: {order: i+1} %>
                            <%= connection_state %>
                          <% end %>
                      <% end %>
                    </td>
                    <td><%= r.select :job, Rules::JOBS_BY_CHAIN[rule.table][rule.chain], {}, {class: "rule-job upper-case", id: "job-#{i+1}", data: {order: i+1}} %></td>
                    <td>
                      <table>
                        <tr>
                          <td><%= r.text_field :nat_action_ip, maxlength: 15,  class: "rule-ip nat-action", data: {order: i+1}, disabled: disable_action, placeholder: :ip %></td>
                        </tr>
                        <tr>
                          <td><%= r.text_field :nat_action_mask, maxlength: 15, class: "rule-ip nat-action", data: {order: i+1}, disabled: disable_action, placeholder: :mask %></td>
                        </tr>
                      </table>
                    </td>
                    <td>
                      <%= link_to "#", class: "btn btn-danger", data: {remove_rule: true, order: (i+1)} do %>
                        <i class="icon-remove icon-white"></i>
                      <% end %>
                    </td>
                  </tr>
                <% end %>
              <% end %>
          </tbody>
      <% end %>
    </table>
  </div>

  <div class="row-fluid">
    <div class="text-right">
      <%= link_to "Add a new rule", "#", class: "btn btn-success", id: "add" %>
    </div>
  </div>
</div>


<script type="text/javascript">
  $(document).ready(function(){
      var _floodCheckbox = $("input[type='checkbox'][data-flood-container]");

      var showOrHideFloodContainer = function(element){
          var thiz = $(element);
          var container = $("#" + thiz.data("flood-container"));
          thiz.is(":checked") ? container.show(250) : container.hide(250);
      };

      var getRules = function(){
          var rules = [];
          $("#all-rules select, #all-rules input").each(function(index, element){
              rules[$(element).attr("name")] = $(element).val();
          });
          return rules;
      };

      /*when the user add syn, udp or icmp flood mitigating */
      _floodCheckbox.each(function(){
          showOrHideFloodContainer($(this));
      });
      _floodCheckbox.on("change", function(){
          showOrHideFloodContainer($(this));
      });
  });
</script>